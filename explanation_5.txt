To build the trie, O(n) is time and space complexity, where n is the number of letters per word. For loop is done to store each letter in a trie. A new node is built if the letter is new to that path for that word. Otherwise, a letter in the words that have common prefix is just stored as a common node. 

Once the trie is built, recursion is done to find the suffixes at a certain node or letter. The search for suffixes is O(n), where n is the number of letters of the suffixes. Every child in an node is to be checked and appended to the results, until (isaword) boolean is hit, to add that to the suffix list. If it does not have a child at that node, the search proceeds to other branches/children. Otherwise, it continues to search until (isaword) and no children in that node are found. 